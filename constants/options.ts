/**
 * @file Default prettier options
 */

import type {
  PluginJavaOptions,
  PluginPHPOptions,
  PluginSvelteOptions,
  PluginXMLOptions,
  PrettierOptions,
} from '@/types/options'

/**
 * Prettier default options
 *
 * @see {@link https://prettier.io/docs/en/options}
 */
export const DEFAULT_OPTIONS: PrettierOptions = {
  printWidth: 80,

  tabWidth: 2,

  useTabs: false,

  semi: true,

  singleQuote: false,

  bracketSpacing: true,

  bracketSameLine: false,

  jsxSingleQuote: false,

  singleAttributePerLine: false,

  vueIndentScriptAndStyle: false,

  quoteProps: 'as-needed',

  trailingComma: 'all',

  arrowParens: 'always',

  proseWrap: 'preserve',

  htmlWhitespaceSensitivity: 'css',

  endOfLine: 'auto',

  embeddedLanguageFormatting: 'auto',

  experimentalTernaries: false,
}

export const DEFAULT_XML_OPTIONS: PluginXMLOptions = {
  xmlSelfClosingSpace: true,
  xmlSortAttributesByKey: false,
  xmlQuoteAttributes: 'preserve',
  xmlWhitespaceSensitivity: 'strict',
}

export const DEFAULT_PHP_OPTIONS: PluginPHPOptions = {
  phpVersion: '7.0',
  trailingCommaPHP: true,
  braceStyle: 'per-cs',
}

export const DEFAULT_SVELTE_OPTIONS: PluginSvelteOptions = {
  svelteSortOrder: 'options-scripts-markup-styles',
  svelteAllowShorthand: true,
  svelteIndentScriptAndStyle: true,
}

export const DEFAULT_JAVA_OPTIONS: PluginJavaOptions = {
  entrypoint: 'compilationUnit',
}

export const JAVA_ENTRYPOINTS = [
  'arrayInitializer',
  'variableInitializerList',
  'block',
  'blockStatements',
  'blockStatement',
  'localVariableDeclarationStatement',
  'localVariableDeclaration',
  'localVariableType',
  'statement',
  'statementWithoutTrailingSubstatement',
  'emptyStatement',
  'labeledStatement',
  'expressionStatement',
  'statementExpression',
  'ifStatement',
  'assertStatement',
  'switchStatement',
  'switchBlock',
  'switchBlockStatementGroup',
  'switchLabel',
  'switchRule',
  'caseConstant',
  'casePattern',
  'whileStatement',
  'doStatement',
  'forStatement',
  'basicForStatement',
  'forInit',
  'forUpdate',
  'statementExpressionList',
  'enhancedForStatement',
  'breakStatement',
  'continueStatement',
  'returnStatement',
  'throwStatement',
  'synchronizedStatement',
  'tryStatement',
  'catches',
  'catchClause',
  'catchFormalParameter',
  'catchType',
  'finally',
  'tryWithResourcesStatement',
  'resourceSpecification',
  'resourceList',
  'resource',
  'yieldStatement',
  'variableAccess',
  'classDeclaration',
  'normalClassDeclaration',
  'classModifier',
  'typeParameters',
  'typeParameterList',
  'classExtends',
  'classImplements',
  'interfaceTypeList',
  'classPermits',
  'classBody',
  'classBodyDeclaration',
  'classMemberDeclaration',
  'fieldDeclaration',
  'fieldModifier',
  'variableDeclaratorList',
  'variableDeclarator',
  'variableDeclaratorId',
  'variableInitializer',
  'unannType',
  'unannPrimitiveTypeWithOptionalDimsSuffix',
  'enumConstantModifier',
  'enumBodyDeclarations',
  'recordDeclaration',
  'recordHeader',
  'recordComponentList',
  'recordComponent',
  'variableArityRecordComponent',
  'recordComponentModifier',
  'recordBody',
  'recordBodyDeclaration',
  'compactConstructorDeclaration',
  'isDims',
  'expression',
  'lambdaExpression',
  'lambdaParameters',
  'lambdaParametersWithBraces',
  'lambdaParameterList',
  'conciseLambdaParameterList',
  'normalLambdaParameterList',
  'normalLambdaParameter',
  'regularLambdaParameter',
  'lambdaParameterType',
  'conciseLambdaParameter',
  'lambdaBody',
  'conditionalExpression',
  'binaryExpression',
  'unaryExpression',
  'unaryExpressionNotPlusMinus',
  'primary',
  'primaryPrefix',
  'primarySuffix',
  'fqnOrRefType',
  'fqnOrRefTypePartRest',
  'fqnOrRefTypePartCommon',
  'fqnOrRefTypePartFirst',
  'parenthesisExpression',
  'castExpression',
  'primitiveCastExpression',
  'referenceTypeCastExpression',
  'newExpression',
  'unqualifiedClassInstanceCreationExpression',
  'classOrInterfaceTypeToInstantiate',
  'typeArgumentsOrDiamond',
  'diamond',
  'methodInvocationSuffix',
  'argumentList',
  'arrayCreationExpression',
  'arrayCreationExpressionWithoutInitializerSuffix',
  'arrayCreationWithInitializerSuffix',
  'dimExprs',
  'dimExpr',
  'classLiteralSuffix',
  'arrayAccessSuffix',
  'methodReferenceSuffix',
  'templateArgument',
  'template',
  'stringTemplate',
  'textBlockTemplate',
  'embeddedExpression',
  'pattern',
  'typePattern',
  'recordPattern',
  'componentPatternList',
  'componentPattern',
  'matchAllPattern',
  'guard',
  'isRefTypeInMethodRef',
  'interfaceDeclaration',
  'normalInterfaceDeclaration',
  'interfaceModifier',
  'interfaceExtends',
  'interfacePermits',
  'interfaceBody',
  'interfaceMemberDeclaration',
  'constantDeclaration',
  'constantModifier',
  'interfaceMethodDeclaration',
  'interfaceMethodModifier',
  'annotationInterfaceDeclaration',
  'annotationInterfaceBody',
  'annotationInterfaceMemberDeclaration',
  'annotationInterfaceElementDeclaration',
  'annotationInterfaceElementModifier',
  'defaultValue',
  'annotation',
  'elementValuePairList',
  'elementValuePair',
  'elementValue',
  'elementValueArrayInitializer',
  'elementValueList',
  'literal',
  'integerLiteral',
  'floatingPointLiteral',
  'booleanLiteral',
  'moduleName',
  'packageName',
  'typeName',
  'expressionName',
  'methodName',
  'packageOrTypeName',
  'ambiguousName',
  'compilationUnit',
  'ordinaryCompilationUnit',
  'modularCompilationUnit',
  'packageDeclaration',
  'packageModifier',
  'importDeclaration',
  'typeDeclaration',
  'moduleDeclaration',
  'moduleDirective',
  'requiresModuleDirective',
  'exportsModuleDirective',
  'opensModuleDirective',
  'usesModuleDirective',
  'providesModuleDirective',
  'requiresModifier',
  'primitiveType',
  'numericType',
  'integralType',
  'floatingPointType',
  'referenceType',
  'classOrInterfaceType',
  'classType',
  'interfaceType',
  'typeVariable',
  'dims',
  'typeParameter',
  'typeParameterModifier',
  'typeBound',
  'additionalBound',
  'typeArguments',
  'typeArgumentList',
  'typeArgument',
  'wildcard',
  'wildcardBounds',
]
